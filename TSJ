#!/usr/bin/sh

# <| PRIVATE DECLARATIONS |>

VERSION=0.04
TSJ_PATH=$(dirname $(readlink -f $0))
TSJ_OUTPUT=$TSJ_PATH/TSJ_OUTPUT
JOBS_NUM=$(cat /proc/cpuinfo | grep "^processor" | wc -l)

# <| PRIVATE FUNCTIONS |>

banner () {
   clear
   echo ' _______________________________________________'
   echo '|===============================================|'
   echo '|                   TSJ '$VERSION'                    |'
   echo '|-----------------------------------------------|'
   echo '|   Your terminal semplified Jenkins script!    |'
   echo '|===============================================|'
}

first_configuration () {
   banner
   echo '|                                               |'
   echo '|             First configuration               |'
   echo '|            ---------------------              |'
   echo '|                                               |'
   echo '| Welcome to TSJ!                               |'
   echo '| This tool was born with the aim to create     |'
   echo '| a simplified terminal version of what is      |'
   echo '| massively know as Jenkins.                    |'
   echo '|                                               |'
   echo '| In order to use it, please, drag your         |'
   echo '| Android environment folder (containing all    |'
   echo '| the Android projects you want to build) here: |'
   echo '|_______________________________________________|'
   echo ''
   read -p '  Folder: ' ENV_PATH
   ENV_PATH=$(echo $ENV_PATH)
   echo $ENV_PATH > $ENV_PATH/.tsj_conf
   mv ./TSJ $ENV_PATH/
   TSJ_PATH=$ENV_PATH
   echo ' _______________________________________________'
   echo '|                                               |'
   echo '| Your environment has been correctly loaded    |'
   echo '| and TSJ script has been moved into that.      |'
   echo '|_______________________________________________|'
   sleep 1
   bash $TSJ_PATH/TSJ
}

build_confirmation () {
   clear
   echo ' _______________________________________________'
   echo '|===============================================|'
   echo '|                   ATTENTION!                  |'
   echo '|===============================================|'
   echo '|                                               |'
   echo '| The build process you configured, could       |'
   echo '| require several hours, depending on the       |'
   echo '| capabilities of the machine which you are     |'
   echo '| preparing to go on with.                      |'
   echo '|                                               |'
   echo '| Are you sure?                                 |'
   echo '|_______________________________________________|'
   echo ''
   read -p 'Choice [y/N]: ' YN
   if [ "$YN" = "y" ]; then
      bash .build_script
      sleep 2
   elif [ "$YN" = "Y" ]; then
      bash .build_script
   fi
}

ccache_setup () {
   echo ' _______________________________________________'
   echo '|                                               |'
   echo '| Which is your desired max ccache size?        |'
   echo '|_______________________________________________|'
   echo ''
   read -p 'Choice: GB ' CCACHE
   if [ -d "$BUILD_ROM/prebuilts/misc/linux-x86/ccache" ]; then
   echo ''$BUILD_ROM'/prebuilts/misc/linux-x86/ccache -M '$CCACHE'' >> .build_script
   else
   echo ''$BUILD_ROM'/prebuilt/linux-x86/ccache -M '$CCACHE'' >> .build_script
   fi
   echo '' >> .build_script
}

exit_tsj () {
   banner
   echo '|                                               |'
   echo '|                   Goodbye!                    |'
   echo '|_______________________________________________|'
   sleep 1
   clear
   exit
}

rom_series () {
   if [ -f $TSJ_PATH/.ftp ]; then
      banner
      echo '|                                               |'
      echo '| Found a valid FTP configuration.              |'
      echo '|_______________________________________________|'
      sleep 1
   else
      banner
      echo '|                                               |'
      echo '| A valid FTP configuration has not found.      |'
      echo '| Configuring your FTP host...                  |'
      echo '|_______________________________________________|'
      sleep 1
      ftp
   fi
   banner
   echo '|                                               |'
   echo '|            Compile a ROMs series              |'
   echo '|           -----------------------             |'
   echo '| Which ones of these Android workspaces would  |'
   echo '| include into your series compilation?         |'
   echo '|_______________________________________________|'
   echo ''
   echo '#!/usr/bin/sh' > .build_script
   echo '' >> .build_script
   echo 'JOBS_NUM=$(cat /proc/cpuinfo | grep "^processor" | wc -l)' >> .build_script
   echo 'TSJ_OUTPUT='$TSJ_OUTPUT'' >> .build_script
   echo '' >> .build_script
   echo '##########' >> .build_script
   echo '' >> .build_script
   DIRS=$(ls -l --time-style="long-iso" $ENV_PATH | egrep '^d'| awk '{print $9}')
   for DIR in $DIRS; do
      if [ -d $DIR/build ]; then
         echo  '  [*] '$DIR
      fi
   done
   echo ''
   echo '  [0] Back to the main menu.'
   echo ' _______________________________________________'
   echo '|                                               |'
   echo '| How many ROMs do you want to compile?         |'
   echo '|_______________________________________________|'
   echo ''
   read -p 'Choice: ' ROM_N
   if [ "$ROM_N" == 0 ]; then
      main_menu
   elif [ $(echo $ROM_N | tr -d '[:digit:]') ]; then
      echo ' _______________________________________________'
      echo '|                                               |'
      echo '| I asked you to write a number.                |'
      echo '|_______________________________________________|'
      sleep 1
      rom_series
   else
      echo "$ROM_N" > .rom_n
   fi
   echo ' _______________________________________________'
   echo '|                                               |'
   echo '| Write down the ROMs that you want to be       |'
   echo '| builded (separate each one with SPACE):       |'
   echo '|_______________________________________________|'
   echo ''
   read -p 'Choice: ' ROM_LIST
   if [ -z "$ROM_LIST" ]; then
      echo ' _______________________________________________'
      echo '|                                               |'
      echo '| You did not write any ROM. Back to main menu. |'
      echo '|_______________________________________________|'
      sleep 1
      main_menu
   else
      echo "$ROM_LIST" > .rom_list
   fi
   while [ "$ROM_N" -gt 0 ]; do
      BUILD_ROM=$(cat .rom_list | awk '{print $'$ROM_N'}')
      banner
      echo '|                                               |'
      echo '|        ROMs building configurations           |'
      echo '|       ------------------------------          |'
      echo '|                                               |'
      echo '| Do you want to enable ccache for this ROM?    |'
      echo '|_______________________________________________|'
      echo ''
      echo 'ROM: '$BUILD_ROM
      read -p 'Choice [y/N]: ' YN_CCACHE
      if [ "$YN_CCACHE" == "y" ]; then
         ccache_setup
      elif [ "$YN_CCACHE" == "Y" ]; then
         ccache_setup
      fi
      echo ' _______________________________________________ '
      echo '|                                               |'
      echo '| How many devices you want to build            |'
      echo '| the following ROM for?                        |'
      echo '|_______________________________________________|'
      echo ''
      echo 'ROM: '$BUILD_ROM
      read -p 'Choice: ' DEVICE_N
      if [ "$DEVICE_N" == 0 ]; then
         rom_series
      elif [ $(echo $DEVICE_N | tr -d '[:digit:]') ]; then
         echo ' _______________________________________________'
         echo '|                                               |'
         echo '| I asked you to write a number.                |'
         echo '|_______________________________________________|'
         sleep 1
         rom_series
      else
         echo "$DEVICE_N" > .device_n
      fi
      echo ' _______________________________________________'
      echo '|                                               |'
      echo '| Write down the devices codenames you want     |'
      echo '| to build the following ROM for (separate      |'
      echo '| each one with SPACE).                         |'
      echo '|_______________________________________________|'
      echo ''
      echo 'ROM: '$BUILD_ROM
      read -p 'Choice: ' DEVICE_LIST
      if [ -z "$DEVICE_LIST" ]; then
         echo ' _______________________________________________'
         echo '|                                               |'
         echo '| You did not write any ROM. Back to main menu. |'
         echo '|_______________________________________________|'
         sleep 1
         rom_series
      else
         echo "$DEVICE_LIST" > .device_list
      fi
      echo 'cd '$BUILD_ROM'' >> .build_script
      echo 'repo sync' >> .build_script
      echo '. build/envsetup.sh > .build_log' >> .build_script
      echo '' >> .build_script
      while [ "$DEVICE_N" -gt 0 ]; do
         BUILD_DEVICE=$(cat .device_list | awk '{print $'$DEVICE_N'}')
         BUILD_DEVICE_PATH=$(find device/ -name $BUILD_DEVICE)
         if [ -f $BUILD_DEVICE_PATH/patches/install.sh ]; then
            echo 'bash '$BUILD_DEVICE_PATH'/patches/install.sh]' >> .build_script
         fi
         echo 'lunch '$BUILD_DEVICE'-userdebug >> .build_log' >> .build_script
         echo 'make -j$JOBS_NUM otapackage >> .build_log' >> .build_script
         echo 'mv $(ls out/target/product/'$BUILD_DEVICE'/ | grep zip$) $TSJ_OUTPUT/'$BUILD_ROM'-'$BUILD_DEVICE'-$(date +%Y_%m_%d).zip' >> .build_script
         echo 'mv .build_log $TSJ_OUTPUT/'$BUILD_ROM'-'$BUILD_DEVICE'-$(date +%Y_%m_%d)-build.log' >> .build_script
         echo 'echo $(md5sum $TSJ_OUTPUT/'$BUILD_ROM'-'$BUILD_DEVICE'-$(date +%Y_%m_%d).zip | awk "{print $1}") > $TSJ_OUTPUT/'$BUILD_ROM'-'$BUILD_DEVICE'-sum.md5' >> .build_script
         echo 'curl -T $TSJ_OUTPUT/'$BUILD_ROM'-'$BUILD_DEVICE'-$(date +%Y_%m_%d).zip ftp://'$(cat .ftp | awk '{print $1}')' --user '$(cat .ftp | awk '{print $2}')':'$(cat .ftp | awk '{print $3}') >> .build_script
         echo 'curl -T $TSJ_OUTPUT'$BUILD_ROM'-'$BUILD_DEVICE'-$(date +%Y_%m_%d)-build.log ftp://'$(cat .ftp | awk '{print $1}')' --user '$(cat .ftp | awk '{print $2}')':'$(cat .ftp | awk '{print $3}') >> .build_script
         echo 'curl -T $TSJ_OUTPUT'$BUILD_ROM'-'$BUILD_DEVICE'-sum.md5 ftp://'$(cat .ftp | awk '{print $1}')' --user '$(cat .ftp | awk '{print $2}')':'$(cat .ftp | awk '{print $3}') >> .build_script
         echo '' >> .build_script
         let DEVICE_N=$DEVICE_N-1
      done
      echo '' >> .build_script
      echo 'make -j$JOBS_NUM clean' >> .build_script
      echo 'rm -rf $(ls . | grep -v ".repo")' >> .build_script
      echo 'cd ..' >> .build_script
      echo '' >> .build_script
      echo '##########' >> .build_script
      echo '' >> .build_script
      let ROM_N=$ROM_N-1
   done
   echo ' _______________________________________________'
   echo '|                                               |'
   echo '| The build script has been correctly           |'
   echo '| configured.                                   |'
   echo '|_______________________________________________|'
   sleep 2
   main_menu
}

ftp () {
   banner
   echo '|                                               |'
   echo '|                Manage FTP host                |'
   echo '|               -----------------               |'
   if [ -f $TSJ_PATH/.ftp ]; then
      echo '|                                               |'
      echo '| Found a valid FTP configuration:              |'
      echo '|_______________________________________________|'
      echo ''
      echo '  FTP host:     '$(cat .ftp | awk '{print $1}')
      echo '  FTP user:     '$(cat .ftp | awk '{print $2}')
      echo '  FTP password: '$(cat .ftp | awk '{print $3}')
      echo ''
      echo '  [r] reconfigure FTP host'
      echo ''
      echo ' _______________________________________________'
      echo '|                                               |'
      echo '| Press ENTER to continue.                      |'
      echo '|_______________________________________________|'
      echo ''
      read -p 'Choice: ' CHOICE
	  if [ "$CHOICE" == "r" ]; then
	     rm $TSJ_PATH/.ftp
             ftp
          elif [ "$CHOICE" == "R" ]; then
             rm $TSJ_PATH/.ftp
             ftp
	  fi
      main_menu
   else
      echo '|                                               |'
      echo '| A valid configuration has not found.          |'
      echo '| Configuring your FTP host...                  |'
      echo '|_______________________________________________|'
      echo ''
      read -p '  FTP host:     ' FTP_HOST
      read -p '  FTP user:     ' FTP_USER
      read -p '  FTP password: ' FTP_PASSWORD
      echo ''$FTP_HOST' '$FTP_USER' '$FTP_PASSWORD'' > $TSJ_PATH/.ftp
      echo ' _______________________________________________'
      echo '|                                               |'
      echo '| Your FTP host has correctly configured.       |'
      echo '| Press ENTER to continue.                      |'
      echo '|_______________________________________________|'
      read -p ''
      main_menu
   fi
}

license () {
   banner
   echo '|                                               |'
   echo '|                    License                    |'
   echo '|                   ---------                   |'
   echo '|                                               |'
   echo '| This tool is released under the GPL v2        |'
   echo '| license. In order to know what you are        |'
   echo '| allowed to do and what you are not, please    |'
   echo '| consult the official GNU documentation,       |'
   echo '| available at:                                 |'
   echo '| http://www.gnu.org/licenses/gpl-2.0.html      |'
   echo '|                                               |'
   echo '| Sources are available at:                     |'
   echo '| https://github.com/MoltenMotherBoard/TSJ      |'
   echo '|                                               |'
   echo '| Press ENTER to continue.                      |'
   echo '|_______________________________________________|'
   read -p ''
   main_menu
}

about () {
   banner
   echo '|                                               |'
   echo '|                     About                     |'
   echo '|                   ---------                   |'
   echo '|                                               |'
   echo '| TSJ is a tool created and designed to achieve |'
   echo '| a streamlined, simple, basic and working      |'
   echo '| version of Jenkins.                           |'
   echo '| It is written to make possible to make        |'
   echo '| the build configuration of different ROMs and |'
   echo '| their uploading process to a remote hosting   |'
   echo '| space possible from a GNU/Linux terminal.     |'
   echo '|                                               |'
   echo '| Current version: '$VERSION'                         |'
   echo '|                                               |'
   echo '| Press ENTER to continue.                      |'
   echo '|_______________________________________________|'
   read -p ''
   main_menu
}

main_menu () {
   banner
   echo '|                                               |'
   echo '|                  Main Menu                    |'
   echo '|                 -----------                   |'
   echo '|                                               |'
   echo '| [1] Configure a ROMs series build             |'
   echo '| [2] Manage FTP host                           |'
   echo '| [3] License                                   |'
   echo '| [4] About                                     |'
   echo '|                                               |'
   echo '|                                               |'
   echo '|-----------------------------------------------|'
   if [ -f $TSJ_PATH/.build_script ]; then
      echo '| [x] Compile from configured build script      |'
   fi
   echo '| [0] Exit                                      |'
   echo '|_______________________________________________|'
   echo ''
   read -p '                 Your choose: ' CHOICE
   if [ "$CHOICE" == 1 ]; then
      rom_series
   elif [ "$CHOICE" == 2 ]; then
      ftp
   elif [ "$CHOICE" == 3 ]; then
      license
   elif [ "$CHOICE" == 4 ]; then
      about
   elif [ "$CHOICE" == "x" ]; then
      build_confirmation
      main_menu
   elif [ "$CHOICE" == "X" ]; then
      build_confirmation
      main_menu
   elif [ "$CHOICE" == 0 ]; then
      exit_tsj
   else
      echo ' _______________________________________________'
      echo '|                                               |'
      echo '|                 WRONG INPUT!                  |'
      echo '|_______________________________________________|'
      sleep 1
      main_menu
   fi
}


# <| BOOT INSTRUCTIONS |>

banner
echo '|                                               |'
echo '| Please wait, I am looking for an eventual     |'
echo '| already initialized configuration...          |'
echo '|_______________________________________________|'
sleep 1
if [ -f $TSJ_PATH/.tsj_conf ]; then
   banner
   echo '|                                               |'
   echo '| Found a valid configuration.                  |'
   echo '|_______________________________________________|'
   cd $(cat $TSJ_PATH/.tsj_conf)
   sleep 0.5
   main_menu
else
   banner
   echo '|                                               |'
   echo '| A valid configuration has not found.          |'
   echo '|_______________________________________________|'
   sleep 1
   first_configuration
fi
